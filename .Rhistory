# predict jan_23
for(i in 1:26){
jan_23[i] = xhat[n,i] + xhat[n-1,i] + nov_22[i]
}
names(jan_23) = colnames(y)
jan_23
# Read and write json files
# PVI
x <- jsonlite::fromJSON(txt = "C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Eurostat Comp/January/PVI_nowcasts/point_estimates.json")
xhat = jan_23
new_names = substr(names(xhat), start = 1, stop = 2)
names(xhat) = new_names
xx = xhat[names(x$entry_1)]
names(xx)[which(is.na(names(xx)))] = 'IT'
xx = as.list(xx)
x$entry_1 = xx
jsonlite::write_json(x, "C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Eurostat Comp/January/PVI_nowcasts/point_estimates.json", pretty = TRUE, null = 'null', auto_unbox = TRUE, na = 'null')
st2 = Sys.time()
sfit.pvi6 <- sparseDFM(X, r = 6, q = 26, alg = 'EM-sparse', err = 'IID', kalman = 'univariate', standardize = TRUE, threshold = 1e-4, max_iter = 50)
et2 = Sys.time()
et2 - st2
plot(sfit.pvi6$em$bic)
sfit.pvi6$em$num_iter
sfit.pvi6$em$alpha_grid
sfit.pvi6$em$loglik
plot(sfit.pvi6$em$loglik)
sfit.pvi6$em$alpha_opt
dim(X)
plot(sfit.pvi6, type = 'loading.heatmap', which.series = 1:26)
x = sfit.pvi6
which.series = 1:26
which.factors = 1:(dim(x$state$factors)[2])
factor.lab = c()
for(i in which.factors){
factor.lab[i] = paste0('F',i)
}
trL = t(x$params$Lambda)
lw = Matrix::Matrix(trL[which.factors,which.series], sparse = TRUE)
lw
st1 = Sys.time()
fit.pvi6_2 <- sparseDFM(X, r = 6, q = 0, alg = 'EM', err = 'IID', kalman = 'univariate', standardize = TRUE, threshold = 1e-4, alphas = 0.1)
plot(sfit.pvi6, type = 'loading.heatmap', which.series = 27:50)
sfit$
l
sfit.pvi6$em$alpha_grid
sfit.pvi6$em$alpha_opt
alphas = seq(0.04,0.05,by=0.001)
alphas
alphas = seq(0.04,0.05,by=0.0001)
alphas
sfit.pvi6$em$bic
alphas = seq(0.04,0.05,by=0.001)
alphas
st2 = Sys.time()
sfit.pvi6_2 <- sparseDFM(X, r = 6, q = 26, alg = 'EM-sparse', err = 'IID', kalman = 'univariate', standardize = TRUE, threshold = 1e-4, max_iter = 50, alphas = seq(0.04,0.05,by=0.001))
et2 = Sys.time()
et2 - st2
sfit.pvi6_2$em$num_iter
plot(sfit.pvi6_2$em$bic)
sfit.pvi6_2$em$alpha_opt
sfit.pvi6_2$em$alpha_grid
sfit.pvi6_2$em$bic
plot(sfit.pvi6$data$fitted.unscaled[,1], type = 'l')
lines(sfit.pvi6$data$X[,1], col = 'red')
lines(fit.pvi6$data$fitted.unscaled[,1], col = 'blue')
plot(sfit.pvi6$data$fitted.unscaled[,2], type = 'l')
lines(sfit.pvi6$data$X[,2], col = 'red')
lines(fit.pvi6$data$fitted.unscaled[,2], col = 'blue')
lines(sfit.pvi6_2$data$fitted.unscaled[,2], col = 'green')
plot(sfit.pvi6$data$X.bal)
plot(sfit.pvi6$data$X.bal[,1], type = 'l')
lines(sfit.pvi6_2$data$fitted[,1], col = 'red')
fit.pca <- sparseDFM(X, r = 6, q = 0, alg = 'PCA', err = 'IID', kalman = 'univariate', standardize = TRUE, threshold = 1e-4)
lines(fit.pca$data$fitted[,1], col = 'blue')
y = pvi
y = y[-1,]
xhat = sfit.pvi6$data$fitted.unscaled[,1:26]
n = nrow(xhat)
# last available month is Nov 22 excpet for series 4 which is Oct 22
nov_22 = y[n-2,]
# predict nov_22 for series 4
nov_22[4] = xhat[n-2,4] + y[n-3,4]
jan_23 = c()
# predict jan_23
for(i in 1:26){
jan_23[i] = xhat[n,i] + xhat[n-1,i] + nov_22[i]
}
names(jan_23) = colnames(y)
jan_23
xhat = jan_23
new_names = substr(names(xhat), start = 1, stop = 2)
names(xhat) = new_names
xx = xhat[names(x$entry_3)]
names(xx)[which(is.na(names(xx)))] = 'IT'
xx = as.list(xx)
x$entry_3 = xx
jsonlite::write_json(x, "C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Eurostat Comp/January/PVI_nowcasts/point_estimates.json", pretty = TRUE, null = 'null', auto_unbox = TRUE, na = 'null')
# Read and write json files
# PVI
x <- jsonlite::fromJSON(txt = "C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Eurostat Comp/January/PVI_nowcasts/point_estimates.json")
# PVI entry 3 - sparseDFM r=6
xhat = jan_23
new_names = substr(names(xhat), start = 1, stop = 2)
names(xhat) = new_names
xx = xhat[names(x$entry_3)]
names(xx)[which(is.na(names(xx)))] = 'IT'
xx = as.list(xx)
x$entry_3 = xx
jsonlite::write_json(x, "C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Eurostat Comp/January/PVI_nowcasts/point_estimates.json", pretty = TRUE, null = 'null', auto_unbox = TRUE, na = 'null')
st3 = Sys.time()
fit.pvi12 <- sparseDFM(X, r = 12, q = 0, alg = 'EM', err = 'IID', kalman = 'univariate', standardize = TRUE, threshold = 1e-4, max_iter = 50)
et3 = Sys.time()
et3 - st3
y = pvi
y = y[-1,]
xhat = fit.pvi12$data$fitted.unscaled[,1:26]
n = nrow(xhat)
# last available month is Nov 22 excpet for series 4 which is Oct 22
nov_22 = y[n-2,]
# predict nov_22 for series 4
nov_22[4] = xhat[n-2,4] + y[n-3,4]
jan_23 = c()
# predict jan_23
for(i in 1:26){
jan_23[i] = xhat[n,i] + xhat[n-1,i] + nov_22[i]
}
names(jan_23) = colnames(y)
jan_23
xhat = jan_23
new_names = substr(names(xhat), start = 1, stop = 2)
names(xhat) = new_names
xx = xhat[names(x$entry_2)]
names(xx)[which(is.na(names(xx)))] = 'IT'
xx = as.list(xx)
x$entry_2 = xx
jsonlite::write_json(x, "C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Eurostat Comp/January/PVI_nowcasts/point_estimates.json", pretty = TRUE, null = 'null', auto_unbox = TRUE, na = 'null')
st4 = Sys.time()
sfit.pvi12 <- sparseDFM(X, r = 12, q = 26, alg = 'EM-sparse', err = 'IID', kalman = 'univariate', standardize = TRUE, threshold = 1e-4, max_iter = 50)
setwd('C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Nowcasting/Package/SparseDFM')
devtools::load_all()
document()
st4 = Sys.time()
sfit.pvi12 <- sparseDFM(X, r = 12, q = 26, alg = 'EM-sparse', err = 'IID', kalman = 'univariate', standardize = TRUE, threshold = 1e-4, max_iter = 50)
1e-7
setwd('C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Nowcasting/Package/SparseDFM')
devtools::load_all()
document()
st4 = Sys.time()
sfit.pvi12 <- sparseDFM(X, r = 12, q = 26, alg = 'EM-sparse', err = 'IID', kalman = 'univariate', standardize = TRUE, threshold = 1e-4, max_iter = 50)
st4 = Sys.time()
sfit.pvi12 <- sparseDFM(X, r = 12, q = 26, alg = 'EM-sparse', err = 'IID', kalman = 'univariate', standardize = TRUE, threshold = 1e-4, max_iter = 30)
X = cbind(target_pvi, indicators)
st4 = Sys.time()
sfit.pvi12 <- sparseDFM(X, r = 12, q = 26, alg = 'EM-sparse', err = 'IID', kalman = 'univariate', standardize = TRUE, threshold = 1e-4, max_iter = 30)
X = cbind(target_ppi, indicators)
st5 = Sys.time()
fit.ppi6 <- sparseDFM(X, r = 6, q = 0, alg = 'EM', err = 'IID', kalman = 'univariate', standardize = TRUE, threshold = 1e-4, max_iter = 50)
et5 = Sys.time()
y = ppi
y = y[-1,]
xhat = fit.ppi6$data$fitted.unscaled[,1:26]
n = nrow(xhat)
# dec 22 availability
dec_22 = y[n-1,]
dec_22_na = which(is.na(dec_22))
# predict dec_22 for these series
for(i in dec_22_na){
dec_22[i] = xhat[n-1,i] + y[n-2,i]
}
# nowcast jan 23
jan_23 = c()
# predict jan_23
for(i in 1:26){
jan_23[i] = xhat[n,i] + dec_22[i]
}
names(jan_23) = colnames(y)
jan_23
###########################################################
###########################################################
# PPI
x <- jsonlite::fromJSON(txt = "C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Eurostat Comp/January/PPI_nowcasts/point_estimates.json")
xhat = jan_23
new_names = substr(names(xhat), start = 1, stop = 2)
names(xhat) = new_names
xx = xhat[names(x$entry_1)]
names(xx)[which(is.na(names(xx)))] = 'IT'
xx = as.list(xx)
x$entry_1 = xx
jsonlite::write_json(x, "C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Eurostat Comp/January/PPI_nowcasts/point_estimates.json", pretty = TRUE, null = 'null', auto_unbox = TRUE, na = 'null')
st7 = Sys.time()
fit.ppi12 <- sparseDFM(X, r = 12, q = 0, alg = 'EM', err = 'IID', kalman = 'univariate', standardize = TRUE, threshold = 1e-4, max_iter = 50)
et7 = Sys.time()
y = ppi
y = y[-1,]
xhat = fit.ppi12$data$fitted.unscaled[,1:26]
n = nrow(xhat)
# dec 22 availability
dec_22 = y[n-1,]
dec_22_na = which(is.na(dec_22))
# predict dec_22 for these series
for(i in dec_22_na){
dec_22[i] = xhat[n-1,i] + y[n-2,i]
}
# nowcast jan 23
jan_23 = c()
# predict jan_23
for(i in 1:26){
jan_23[i] = xhat[n,i] + dec_22[i]
}
names(jan_23) = colnames(y)
jan_23
xhat = jan_23
new_names = substr(names(xhat), start = 1, stop = 2)
names(xhat) = new_names
xx = xhat[names(x$entry_2)]
names(xx)[which(is.na(names(xx)))] = 'IT'
xx = as.list(xx)
x$entry_2 = xx
jsonlite::write_json(x, "C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Eurostat Comp/January/PPI_nowcasts/point_estimates.json", pretty = TRUE, null = 'null', auto_unbox = TRUE, na = 'null')
st6 = Sys.time()
sfit.ppi6 <- sparseDFM(X, r = 6, q = 26, alg = 'EM-sparse', err = 'IID', kalman = 'univariate', standardize = TRUE, threshold = 1e-4, max_iter = 50)
et6 = Sys.time
y = ppi
y = y[-1,]
xhat = sfit.ppi6$data$fitted.unscaled[,1:26]
n = nrow(xhat)
# dec 22 availability
dec_22 = y[n-1,]
dec_22_na = which(is.na(dec_22))
# predict dec_22 for these series
for(i in dec_22_na){
dec_22[i] = xhat[n-1,i] + y[n-2,i]
}
# nowcast jan 23
jan_23 = c()
# predict jan_23
for(i in 1:26){
jan_23[i] = xhat[n,i] + dec_22[i]
}
names(jan_23) = colnames(y)
jan_23
xhat = jan_23
new_names = substr(names(xhat), start = 1, stop = 2)
names(xhat) = new_names
xx = xhat[names(x$entry_3)]
names(xx)[which(is.na(names(xx)))] = 'IT'
xx = as.list(xx)
x$entry_3 = xx
jsonlite::write_json(x, "C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Eurostat Comp/January/PPI_nowcasts/point_estimates.json", pretty = TRUE, null = 'null', auto_unbox = TRUE, na = 'null')
st8 = Sys.time()
sfit.ppi12 <- sparseDFM(X, r = 12, q = 0, alg = '2Stage', err = 'IID', kalman = 'univariate', standardize = TRUE, threshold = 1e-4, max_iter = 30)
et8 = Sys.time
y = ppi
y = y[-1,]
xhat = sfit.ppi12$data$fitted.unscaled[,1:26]
n = nrow(xhat)
# dec 22 availability
dec_22 = y[n-1,]
dec_22_na = which(is.na(dec_22))
# predict dec_22 for these series
for(i in dec_22_na){
dec_22[i] = xhat[n-1,i] + y[n-2,i]
}
# nowcast jan 23
jan_23 = c()
# predict jan_23
for(i in 1:26){
jan_23[i] = xhat[n,i] + dec_22[i]
}
names(jan_23) = colnames(y)
jan_23
xhat = jan_23
new_names = substr(names(xhat), start = 1, stop = 2)
names(xhat) = new_names
xx = xhat[names(x$entry_4)]
names(xx)[which(is.na(names(xx)))] = 'IT'
xx = as.list(xx)
x$entry_4 = xx
jsonlite::write_json(x, "C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Eurostat Comp/January/PPI_nowcasts/point_estimates.json", pretty = TRUE, null = 'null', auto_unbox = TRUE, na = 'null')
X = cbind(target_pvi, indicators)
st4 = Sys.time()
sfit.pvi12 <- sparseDFM(X, r = 12, q = 0, alg = '2Stage', err = 'IID', kalman = 'univariate', standardize = TRUE, threshold = 1e-4, max_iter = 30)
et4 = Sys.time()
y = pvi
y = y[-1,]
xhat = sfit.pvi12$data$fitted.unscaled[,1:26]
n = nrow(xhat)
# last available month is Nov 22 excpet for series 4 which is Oct 22
nov_22 = y[n-2,]
# predict nov_22 for series 4
nov_22[4] = xhat[n-2,4] + y[n-3,4]
jan_23 = c()
# predict jan_23
for(i in 1:26){
jan_23[i] = xhat[n,i] + xhat[n-1,i] + nov_22[i]
}
names(jan_23) = colnames(y)
jan_23
# Read and write json files
# PVI
x <- jsonlite::fromJSON(txt = "C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Eurostat Comp/January/PVI_nowcasts/point_estimates.json")
xhat = jan_23
new_names = substr(names(xhat), start = 1, stop = 2)
names(xhat) = new_names
xx = xhat[names(x$entry_4)]
names(xx)[which(is.na(names(xx)))] = 'IT'
xx = as.list(xx)
x$entry_4 = xx
jsonlite::write_json(x, "C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Eurostat Comp/January/PVI_nowcasts/point_estimates.json", pretty = TRUE, null = 'null', auto_unbox = TRUE, na = 'null')
x <- jsonlite::fromJSON(txt = "C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Eurostat Comp/January/PVI_nowcasts/point_estimates.json")
x = x[-5] # remove entry 5
n = length(x$entry_1)
meanpvi = rep(NA, n)
for(i in 1:n){
if(i == 15){
}else{
pv = sapply(x, '[[', i)
meanpvi[i] = mean(pv)
}
}
names(meanpvi) = names(x$entry_1)
meanpvi = as.list(meanpvi)
x$entry_5 = meanpvi
jsonlite::write_json(x, "C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Eurostat Comp/January/PVI_nowcasts/point_estimates.json", pretty = TRUE, null = 'null', auto_unbox = TRUE, na = 'null')
x <- jsonlite::fromJSON(txt = "C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Eurostat Comp/January/PPI_nowcasts/point_estimates.json")
x = x[-5] # remove entry 5
n = length(x$entry_1)
meanppi = rep(NA, n)
for(i in 1:n){
if(i == 15 || i == 16){
}else{
pp = sapply(x, '[[', i)
meanppi[i] = mean(pp)
}
}
names(meanppi) = names(x$entry_1)
meanppi = as.list(meanppi)
x$entry_5 = meanppi
jsonlite::write_json(x, "C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Eurostat Comp/January/PPI_nowcasts/point_estimates.json", pretty = TRUE, null = 'null', auto_unbox = TRUE, na = 'null')
tour <- ts(tour_occ_nim[,-1], start = c(1990,1), frequency = 12)
tour.na = matrix(NA, nrow = 2, ncol = ncol(tour))
tour = ts(rbind(tour, tour.na), start = c(1990,1), frequency = 12)
# NEW: from 2004
tour = window(tour, start = c(2004,1), end = end(tour))
tour_jan2004 = tour[1,c(1,2,4:11,13,14,16:18,20:26)]
tour_may2004 = tour[5,c(12,19)]
tour_jan2005 = tour[13,c(3,15)]
# remove the 0 in series 10
tour[196,10] = 2
# replace 2020 (from Feb) and 2021 (all) with a forecast pretending covid did not happen
new_tour = window(tour, start = start(tour), end = c(2020,2))
# add NA 22 months ahead for each
new_tour = rbind(new_tour, matrix(NA, ncol = 26, nrow = 22))
new_tour = ts(new_tour, start = c(2004,1), frequency = 12)
library(forecast)
dshw_pred = list()
for(i in 1:26){
t1 = max(which(!is.na(new_tour[,i])))
y = na.omit(new_tour[1:t1,i])
hh = length(new_tour[(t1+1):length(new_tour[,i]),i])
dshw_model = dshw(y, period1=4, period2 = 12, h=hh)
nn = length(dshw_model$mean)
dshw_pred[[i]] = dshw_model$mean[(nn-21):nn]
}
# fill in the original data in 2020 and 2021
tour_dshw = tour
for(i in 1:26){
tour_dshw[195:216,i] = dshw_pred[[i]]
}
tour_st = diff(log(tour_dshw), 12)
# data
target = tour_st # now starts in jan 2005 because of the transform
indicators = cbind(new_fred,
new_opec,
new_google)
# make indicators start in jan 2005
indicators = ts(indicators, start = c(2004,1), frequency = 12)
indicators = window(indicators, start = c(2005,1), end = end(indicators))
X = cbind(target, indicators)
# how many factors?
tuneFactors(X, plot = TRUE)
# fit DFM to this
fit_tour_dfm = sparseDFM(X, r = 6, q = 0, alg = 'EM-sparse', err = 'IID', kalman = 'univariate', standardize = TRUE, threshold = 1e-4, max_iter = 50)
tour_xhat = fit_tour_dfm$data$fitted.unscaled[,1:26]
# true non-stationary data from jan 2005
tour_y = window(tour_dshw, start = c(2005,1), end = end(tour_dshw))
# transform back to levels
# yhat_jan23 = exp(xhat_jan23)*y_jan22
# is jan22 available?
nr = nrow(target)
tour_jan22 = target[(nr-12),]
tour_xhat = fit_tour_dfm$data$fitted.unscaled[,1:26]
# true non-stationary data from jan 2005
tour_y = window(tour_dshw, start = c(2005,1), end = end(tour_dshw))
# transform back to levels
# yhat_jan23 = exp(xhat_jan23)*y_jan22
# is jan22 available?
nr = nrow(tour_y)
tour_jan22 = tour_y[(nr-12),]
tour_jan22
tour[,1]
# series 3 missing in jan 2022 so need to predict this
t3_jan22 = exp(tour_xhat[nr-12,3])*tour_y[nr-12-12,3]
t3_jan22
tour_jan22[3] = t3_jan22
tour_jan22
tour_jan23 = c()
for(i in 1:26){
tour_jan23[i] = exp(tour_xhat[nr,i])*tour_jan22
}
tour_jan23 = c()
for(i in 1:26){
tour_jan23[i] = exp(tour_xhat[nr,i])*tour_jan22[i]
}
tour_jan23
x <- jsonlite::fromJSON(txt = "C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Eurostat Comp/January/TOUR_nowcasts/point_estimates.json")
names(tour_jan23) = colnames(tour)
tour_jan23
xhat = tour_jan23
new_names = substr(names(xhat), start = 1, stop = 2)
names(xhat) = new_names
xx = xhat[names(x$entry_2)]
names(xx)[which(is.na(names(xx)))] = 'IT'
xx = as.list(xx)
x$entry_2 = xx
jsonlite::write_json(x, "C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Eurostat Comp/January/TOUR_nowcasts/point_estimates.json", pretty = TRUE, null = 'null', auto_unbox = TRUE, na = 'null')
# fit DFM to this
fit_tour_dfm = sparseDFM(X, r = 6, q = 0, alg = 'EM', err = 'IID', kalman = 'univariate', standardize = TRUE, threshold = 1e-4, max_iter = 50)
tour_xhat = fit_tour_dfm$data$fitted.unscaled[,1:26]
# true non-stationary data from jan 2005
tour_y = window(tour_dshw, start = c(2005,1), end = end(tour_dshw))
# transform back to levels
# yhat_jan23 = exp(xhat_jan23)*y_jan22
# is jan22 available?
nr = nrow(tour_y)
tour_jan22 = tour_y[(nr-12),]
# series 3 missing in jan 2022 so need to predict this
t3_jan22 = exp(tour_xhat[nr-12,3])*tour_y[nr-12-12,3]
tour_jan22[3] = t3_jan22
tour_jan23 = c()
for(i in 1:26){
tour_jan23[i] = exp(tour_xhat[nr,i])*tour_jan22[i]
}
names(tour_jan23) = colnames(tour)
tour_jan23
xhat = tour_jan23
new_names = substr(names(xhat), start = 1, stop = 2)
names(xhat) = new_names
xx = xhat[names(x$entry_1)]
names(xx)[which(is.na(names(xx)))] = 'IT'
xx = as.list(xx)
x$entry_1 = xx
# fit DFM to this
fit_tour_dfm = sparseDFM(X, r = 13, q = 0, alg = '2Stage', err = 'IID', kalman = 'univariate', standardize = TRUE, threshold = 1e-4, max_iter = 50)
# predicted stationary data
tour_xhat = fit_tour_dfm$data$fitted.unscaled[,1:26]
# true non-stationary data from jan 2005
tour_y = window(tour_dshw, start = c(2005,1), end = end(tour_dshw))
# transform back to levels
# yhat_jan23 = exp(xhat_jan23)*y_jan22
# is jan22 available?
nr = nrow(tour_y)
tour_jan22 = tour_y[(nr-12),]
# series 3 missing in jan 2022 so need to predict this
t3_jan22 = exp(tour_xhat[nr-12,3])*tour_y[nr-12-12,3]
tour_jan22[3] = t3_jan22
tour_jan23 = c()
for(i in 1:26){
tour_jan23[i] = exp(tour_xhat[nr,i])*tour_jan22[i]
}
names(tour_jan23) = colnames(tour)
tour_jan23
xhat = tour_jan23
new_names = substr(names(xhat), start = 1, stop = 2)
names(xhat) = new_names
xx = xhat[names(x$entry_4)]
names(xx)[which(is.na(names(xx)))] = 'IT'
xx = as.list(xx)
x$entry_4 = xx
jsonlite::write_json(x, "C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Eurostat Comp/January/TOUR_nowcasts/point_estimates.json", pretty = TRUE, null = 'null', auto_unbox = TRUE, na = 'null')
x <- jsonlite::fromJSON(txt = "C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Eurostat Comp/January/TOUR_nowcasts/point_estimates.json")
x = x[-5] # remove entry 5
x <- jsonlite::fromJSON(txt = "C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Eurostat Comp/January/PPI_nowcasts/point_estimates.json")
x = x[-5] # remove entry 5
n = length(x$entry_1)
meanppi = rep(NA, n)
for(i in 1:n){
if(i == 16){
}else{
pp = sapply(x, '[[', i)
meanppi[i] = mean(pp)
}
}
names(meanppi) = names(x$entry_1)
meanppi = as.list(meanppi)
x$entry_5 = meanppi
jsonlite::write_json(x, "C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Eurostat Comp/January/PPI_nowcasts/point_estimates.json", pretty = TRUE, null = 'null', auto_unbox = TRUE, na = 'null')
x <- jsonlite::fromJSON(txt = "C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Eurostat Comp/January/TOUR_nowcasts/point_estimates.json")
x = x[-5] # remove entry 5
n = length(x$entry_1)
meanppi = rep(NA, n)
for(i in 1:n){
if(i == 13){
}else{
pp = sapply(x, '[[', i)
meanppi[i] = mean(pp)
}
}
names(meanppi) = names(x$entry_1)
meanppi = as.list(meanppi)
x$entry_5 = meanppi
jsonlite::write_json(x, "C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Eurostat Comp/January/TOUR_nowcasts/point_estimates.json", pretty = TRUE, null = 'null', auto_unbox = TRUE, na = 'null')
