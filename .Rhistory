matplot(fit2$state$factors, type = 'l')
load("C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Nowcasting/Sparse DFM/SparseDFM-main - Copy/inflation.rda")
X = as.matrix(inflation)
X = diff(X)
tune_factors(X, plot = TRUE)
fit2 <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
fit2 <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
fit2 <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
fit2 <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
fit2 <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
fit2 <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
fit2 <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
fit2 <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
fit2 <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
fit2 <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
setwd('C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Nowcasting/Package/SparseDFM')
library(devtools)
library(roxygen2)
devtools::load_all()
document()
?SparseDFM::kalmanUnivariate
load("C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Nowcasting/Sparse DFM/SparseDFM-main - Copy/inflation.rda")
X = as.matrix(inflation)
library(naniar)
vis_miss(as.data.frame(X))
X = diff(X)
tune_factors(X, plot = TRUE)
fit2 <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
fit2 <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
fit2 <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
fit2 <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
fit2 <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
fit2 <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
fit2 <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
fit2 <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
fit2 <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
fit2 <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
fit2 <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
fit2 <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
fit2 <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
fit2 <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
fit2 <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
fit2 <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
r = 3
q = 0
alg = 'EM'
err = 'IID'
standardize = TRUE
alphas = logspace(-2,3,100)
sparse = FALSE
kalman = 'univariate'
max_iter=100
threshold=1e-4
n = dim(X)[1]
p = dim(X)[2]
k = r + p
# standardize if TRUE
X.raw = X
X.scale = scale(X)
X.mean = attr(X.scale, "scaled:center")
X.sd = attr(X.scale, "scaled:scale")
if(standardize){
X = X.scale
}
initialise <- initPCA(X,r,err)
a0_0 = initialise$a0_0
P0_0 = initialise$P0_0
A.tilde = initialise$A.tilde
Lambda.tilde = initialise$Lambda.tilde
Sigma.u.tilde = initialise$Sigma.u.tilde
Sigma.eta = initialise$Sigma.eta
factors.PCA = initialise$factors.pca
loadings.PCA = initialise$loadings.pca
n = dim(X)[1]
p = dim(X)[2]
k = dim(A.tilde)[1]
r = k
previous_loglik = -.Machine$double.xmax   # at least 2 iterations
num_iter = 0        # counter begins at 0
converged = 0       # convergence initialised to FALSE
loglik.store = c()  # store log likelihoods
W = 1*!is.na(X)   # data availabi
KFS <- kalmanCpp(X, a0_0, P0_0, A.tilde, Lambda.tilde, Sigma.eta, Sigma.u.tilde)
KFS$at_n
KFS <- kalmanUnivariate(X, a0_0, P0_0, A.tilde, Lambda.tilde, Sigma.eta, Sigma.u.tilde)
KFS$at_n
KFS <- kalmanUnivariate(X, a0_0, P0_0, A.tilde, Lambda.tilde, Sigma.eta, Sigma.u.tilde)
KFS$at_n[,1:10]
KFS <- kalmanUnivariate(X, a0_0, P0_0, A.tilde, Lambda.tilde, Sigma.eta, Sigma.u.tilde)
KFS$at_n[,1:10]
KFS <- kalmanUnivariate(X, a0_0, P0_0, A.tilde, Lambda.tilde, Sigma.eta, Sigma.u.tilde)
KFS$at_n[,1:10]
KFS <- kalmanUnivariate(X, a0_0, P0_0, A.tilde, Lambda.tilde, Sigma.eta, Sigma.u.tilde)
KFS$at_n[,1:10]
KFS <- kalmanUnivariate(X, a0_0, P0_0, A.tilde, Lambda.tilde, Sigma.eta, Sigma.u.tilde)
KFS$at_n[,1:10]
KFS <- kalmanUnivariate(X, a0_0, P0_0, A.tilde, Lambda.tilde, Sigma.eta, Sigma.u.tilde)
KFS$at_n[,1:10]
devtools::load_all()
document()
X = as.matrix(inflation)
X = diff(X)
r = 3
q = 0
alg = 'EM'
err = 'IID'
standardize = TRUE
alphas = logspace(-2,3,100)
sparse = FALSE
kalman = 'univariate'
max_iter=100
threshold=1e-4
n = dim(X)[1]
p = dim(X)[2]
k = r + p
# standardize if TRUE
X.raw = X
X.scale = scale(X)
X.mean = attr(X.scale, "scaled:center")
X.sd = attr(X.scale, "scaled:scale")
if(standardize){
X = X.scale
}
initialise <- initPCA(X,r,err)
a0_0 = initialise$a0_0
P0_0 = initialise$P0_0
A.tilde = initialise$A.tilde
Lambda.tilde = initialise$Lambda.tilde
Sigma.u.tilde = initialise$Sigma.u.tilde
Sigma.eta = initialise$Sigma.eta
factors.PCA = initialise$factors.pca
loadings.PCA = initialise$loadings.pca
n = dim(X)[1]
p = dim(X)[2]
k = dim(A.tilde)[1]
r = k
previous_loglik = -.Machine$double.xmax   # at least 2 iterations
num_iter = 0        # counter begins at 0
converged = 0       # convergence initialised to FALSE
loglik.store = c()  # store log likelihoods
W = 1*!is.na(X)   # data availability - n x p - 0 for missing, 1 for observed
KFS <- kalmanUnivariate(X, a0_0, P0_0, A.tilde, Lambda.tilde, Sigma.eta, Sigma.u.tilde)
KFS$at_n[,1:10]
KFS <- kalmanUnivariate(X, a0_0, P0_0, A.tilde, Lambda.tilde, Sigma.eta, Sigma.u.tilde)
KFS$at_n[,1:10]
KFS <- kalmanUnivariate(X, a0_0, P0_0, A.tilde, Lambda.tilde, Sigma.eta, Sigma.u.tilde)
KFS$at_n[,1:10]
KFS <- kalmanUnivariate(X, a0_0, P0_0, A.tilde, Lambda.tilde, Sigma.eta, Sigma.u.tilde)
KFS$at_n[,1:10]
KFS <- kalmanUnivariate(X, a0_0, P0_0, A.tilde, Lambda.tilde, Sigma.eta, Sigma.u.tilde)
KFS$at_n[,1:10]
KFS <- kalmanUnivariate(X, a0_0, P0_0, A.tilde, Lambda.tilde, Sigma.eta, Sigma.u.tilde)
KFS$at_n[,1:10]
KFS <- kalmanUnivariate(X, a0_0, P0_0, A.tilde, Lambda.tilde, Sigma.eta, Sigma.u.tilde)
KFS$at_n[,1:10]
KFS <- kalmanUnivariate(X, a0_0, P0_0, A.tilde, Lambda.tilde, Sigma.eta, Sigma.u.tilde)
KFS$at_n[,1:10]
KFS <- kalmanUnivariate(X, a0_0, P0_0, A.tilde, Lambda.tilde, Sigma.eta, Sigma.u.tilde)
KFS$at_n[,1:10]
KFS <- kalmanUnivariate(X, a0_0, P0_0, A.tilde, Lambda.tilde, Sigma.eta, Sigma.u.tilde)
KFS$at_n[,1:10]
setwd('C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Nowcasting/Package/SparseDFM')
library(devtools)
library(roxygen2)
devtools::load_all()
document()
load("C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Nowcasting/Sparse DFM/SparseDFM-main - Copy/inflation.rda")
X = as.matrix(inflation)
X = diff(X)
tune_factors(X, plot = TRUE)
fit2 <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
fit2 <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
fit2 <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
r = 3
q = 0
alg = 'EM'
err = 'IID'
standardize = TRUE
alphas = logspace(-2,3,100)
sparse = FALSE
kalman = 'univariate'
max_iter=100
threshold=1e-4
n = dim(X)[1]
p = dim(X)[2]
k = r + p
# standardize if TRUE
X.raw = X
X.scale = scale(X)
X.mean = attr(X.scale, "scaled:center")
X.sd = attr(X.scale, "scaled:scale")
if(standardize){
X = X.scale
}
initialise <- initPCA(X,r,err)
a0_0 = initialise$a0_0
P0_0 = initialise$P0_0
A.tilde = initialise$A.tilde
Lambda.tilde = initialise$Lambda.tilde
Sigma.u.tilde = initialise$Sigma.u.tilde
Sigma.eta = initialise$Sigma.eta
factors.PCA = initialise$factors.pca
loadings.PCA = initialise$loadings.pca
n = dim(X)[1]
p = dim(X)[2]
k = dim(A.tilde)[1]
r = k
previous_loglik = -.Machine$double.xmax   # at least 2 iterations
num_iter = 0        # counter begins at 0
converged = 0       # convergence initialised to FALSE
loglik.store = c()  # store log likelihoods
W = 1*!is.na(X)   # data availability - n x p - 0 for missing, 1 for observed
KFS <- kalmanUnivariate(X, a0_0, P0_0, A.tilde, Lambda.tilde, Sigma.eta, Sigma.u.tilde)
KFS$at_n[,1:10]
KFS <- kalmanUnivariate(X, a0_0, P0_0, A.tilde, Lambda.tilde, Sigma.eta, Sigma.u.tilde)
KFS$at_n[,1:10]
KFS <- kalmanUnivariate(X, a0_0, P0_0, A.tilde, Lambda.tilde, Sigma.eta, Sigma.u.tilde)
KFS$at_n[,1:10]
KFS <- kalmanUnivariate(X, a0_0, P0_0, A.tilde, Lambda.tilde, Sigma.eta, Sigma.u.tilde)
KFS$at_n[,1:10]
KFS <- kalmanUnivariate(X, a0_0, P0_0, A.tilde, Lambda.tilde, Sigma.eta, Sigma.u.tilde)
KFS$at_n[,1:10]
KFS <- kalmanUnivariate(X, a0_0, P0_0, A.tilde, Lambda.tilde, Sigma.eta, Sigma.u.tilde)
KFS$at_n[,1:10]
KFS$at_n[,1:20]
KFS$at_n[,1:30]
KFS$at_n[,1:40]
at_n = KFS$at_n             # state mean: k x n matrix (t=1,...,n)
at_n
setwd('C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Nowcasting/Package/SparseDFM')
library(devtools)
library(roxygen2)
devtools::load_all()
document()
load("C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Nowcasting/Sparse DFM/SparseDFM-main - Copy/inflation.rda")
X = as.matrix(inflation)
X = diff(X)
tune_factors(X, plot = TRUE)
r = 3
q = 0
alg = 'EM'
err = 'IID'
standardize = TRUE
alphas = logspace(-2,3,100)
sparse = FALSE
kalman = 'univariate'
max_iter=100
threshold=1e-4
n = dim(X)[1]
p = dim(X)[2]
k = r + p
# standardize if TRUE
X.raw = X
X.scale = scale(X)
X.mean = attr(X.scale, "scaled:center")
X.sd = attr(X.scale, "scaled:scale")
if(standardize){
X = X.scale
}
initialise <- initPCA(X,r,err)
a0_0 = initialise$a0_0
P0_0 = initialise$P0_0
A.tilde = initialise$A.tilde
Lambda.tilde = initialise$Lambda.tilde
Sigma.u.tilde = initialise$Sigma.u.tilde
Sigma.eta = initialise$Sigma.eta
factors.PCA = initialise$factors.pca
loadings.PCA = initialise$loadings.pca
n = dim(X)[1]
p = dim(X)[2]
k = dim(A.tilde)[1]
r = k
previous_loglik = -.Machine$double.xmax   # at least 2 iterations
num_iter = 0        # counter begins at 0
converged = 0       # convergence initialised to FALSE
loglik.store = c()  # store log likelihoods
W = 1*!is.na(X)   # data availability - n x p - 0 for missing, 1 for observed
KFS <- kalmanUnivariate(X, a0_0, P0_0, A.tilde, Lambda.tilde, Sigma.eta, Sigma.u.tilde)
at_n = KFS$at_n             # state mean: k x n matrix (t=1,...,n)
at_n
X = as.matrix(inflation)
X = diff(X)
tune_factors(X, plot = TRUE)
fit2 <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
r = 3
q = 0
alg = 'EM'
err = 'IID'
standardize = TRUE
alphas = logspace(-2,3,100)
sparse = FALSE
kalman = 'univariate'
max_iter=100
threshold=1e-4
n = dim(X)[1]
p = dim(X)[2]
k = r + p
# standardize if TRUE
X.raw = X
X.scale = scale(X)
X.mean = attr(X.scale, "scaled:center")
X.sd = attr(X.scale, "scaled:scale")
if(standardize){
X = X.scale
}
initialise <- initPCA(X,r,err)
a0_0 = initialise$a0_0
P0_0 = initialise$P0_0
A.tilde = initialise$A.tilde
Lambda.tilde = initialise$Lambda.tilde
Sigma.u.tilde = initialise$Sigma.u.tilde
Sigma.eta = initialise$Sigma.eta
factors.PCA = initialise$factors.pca
loadings.PCA = initialise$loadings.pca
n = dim(X)[1]
p = dim(X)[2]
k = dim(A.tilde)[1]
r = k
previous_loglik = -.Machine$double.xmax   # at least 2 iterations
num_iter = 0        # counter begins at 0
converged = 0       # convergence initialised to FALSE
loglik.store = c()  # store log likelihoods
W = 1*!is.na(X)   # data availability - n x p - 0 for missing, 1 for observed
KFS <- kalmanUnivariate(X, a0_0, P0_0, A.tilde, Lambda.tilde, Sigma.eta, Sigma.u.tilde)
KFS$at_n[,1:30]
KFS$at_n[,1:50]
KFS$at_t
KFS$at_n
KFS <- kalmanUnivariate(X, a0_0, P0_0, A.tilde, Lambda.tilde, Sigma.eta, Sigma.u.tilde)
KFS2 <- kalmanCpp(X, a0_0, P0_0, A.tilde, Lambda.tilde, Sigma.eta, Sigma.u.tilde)
KFS$at_n
KFS2$at_n
devtools::load_all()
document()
load("C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Nowcasting/Sparse DFM/SparseDFM-main - Copy/inflation.rda")
X = as.matrix(inflation)
X = diff(X)
# 3 factors
tune_factors(X, plot = TRUE)
# fit model
fit <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
r = 3
q = 0
alg = 'EM'
err = 'IID'
standardize = TRUE
alphas = logspace(-2,3,100)
sparse = FALSE
kalman = 'univariate'
max_iter=100
threshold=1e-4
n = dim(X)[1]
p = dim(X)[2]
k = r + p
# standardize if TRUE
X.raw = X
X.scale = scale(X)
X.mean = attr(X.scale, "scaled:center")
X.sd = attr(X.scale, "scaled:scale")
if(standardize){
X = X.scale
}
initialise <- initPCA(X,r,err)
a0_0 = initialise$a0_0
P0_0 = initialise$P0_0
A.tilde = initialise$A.tilde
Lambda.tilde = initialise$Lambda.tilde
Sigma.u.tilde = initialise$Sigma.u.tilde
Sigma.eta = initialise$Sigma.eta
factors.PCA = initialise$factors.pca
loadings.PCA = initialise$loadings.pca
n = dim(X)[1]
p = dim(X)[2]
k = dim(A.tilde)[1]
r = k
previous_loglik = -.Machine$double.xmax   # at least 2 iterations
num_iter = 0        # counter begins at 0
converged = 0       # convergence initialised to FALSE
loglik.store = c()  # store log likelihoods
W = 1*!is.na(X)   # data availability - n x p - 0 for missing, 1 for observed
KFS <- kalmanUnivariate(X, a0_0, P0_0, A.tilde, Lambda.tilde, Sigma.eta, Sigma.u.tilde)
KFS$at_n
KFS <- kalmanUnivariate(X, a0_0, P0_0, A.tilde, Lambda.tilde, Sigma.eta, Sigma.u.tilde)
at_n = KFS$at_n             # state mean: k x n matrix (t=1,...,n)
at_n
KFS <- kalmanUnivariate(X, a0_0, P0_0, A.tilde, Lambda.tilde, Sigma.eta, Sigma.u.tilde)
at_n = KFS$at_n             # state mean: k x n matrix (t=1,...,n)
at_n
KFS <- kalmanCpp(X, a0_0, P0_0, A.tilde, Lambda.tilde, Sigma.eta, Sigma.u.tilde)
KFS$at_n
# load package
devtools::load_all()
document()
# fit model
fit <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
load("C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Nowcasting/Sparse DFM/SparseDFM-main - Copy/inflation.rda")
X = as.matrix(inflation)
X = diff(X)
# 3 factors
tune_factors(X, plot = TRUE)
# fit model
fit <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
# fit model
fit <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
# fit model
fit <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
# fit model
fit <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
# fit model
fit <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
# fit model
fit <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
fit$state$factors
# fit model
fit <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
load("C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Nowcasting/Sparse DFM/SparseDFM-main - Copy/inflation.rda")
X = as.matrix(inflation)
X = diff(X)
# setwd for where the package is saved (download from github main branch)
setwd('C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Nowcasting/Package/SparseDFM')
# packages required
library(devtools)
library(roxygen2)
# load package
devtools::load_all()
document()
# 3 factors
tune_factors(X, plot = TRUE)
# fit model
fit <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
# fit model
fit <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
# fit model
fit <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
# fit model
fit <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
# fit model
fit <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
matplot(fit$state$factors, type = 'l')
# fit model
fit <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'multivariate')
matplot(fit$state$factors, type = 'l')
# load package
devtools::load_all()
document()
load("C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Nowcasting/Sparse DFM/SparseDFM-main - Copy/inflation.rda")
X = as.matrix(inflation)
X = diff(X)
# 3 factors
tune_factors(X, plot = TRUE)
# fit model
fit <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'multivariate')
# fit model
fit <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
# fit model
fit <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
# fit model
fit <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
# fit model
fit <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
# fit model
fit <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
# fit model
fit <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
# fit model
fit <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
# fit model
fit <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
# fit model
fit <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
# fit model
fit <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
plot(fit
)
plot(fit, series.col = 'blue', factor.col = 'yellow', factor.lwd = 3)
plot(fit, type = 'loading.heatmap', which.series = 1:10)
plot(fit, type = 'loading.lineplot', loading.factor = 1)
plot(fit, type = 'residual')
plot(fit, type = 'residuals')
?plot.SparseDFM
plot(fit, type = 'residual')
# load package
devtools::load_all()
load("C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Nowcasting/Sparse DFM/SparseDFM-main - Copy/inflation.rda")
X = as.matrix(inflation)
X = diff(X)
# setwd for where the package is saved (download from github main branch)
setwd('C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Nowcasting/Package/SparseDFM')
# packages required
library(devtools)
library(roxygen2)
# load package
devtools::load_all()
document()
# setwd for where the package is saved (download from github main branch)
setwd('C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Nowcasting/Package/SparseDFM')
# packages required
library(devtools)
library(roxygen2)
# load package
devtools::load_all()
document()
# fit model
fit <- SparseDFM(X, r = 3, q =0, alg = 'EM', err = 'IID', kalman = 'univariate')
plot(fit, type = 'residual')
fit2 <- dfms::DFM(X, r = 3, p = 1, rQ = 'none', rR = 'diagonal', em.method = 'BM', pos.corr = TRUE)
dfms::plot.dfm(fit2)
?dfms::plot.dfm
plot(fit2, type = 'residual')
plot(fit2, type = 'joint')
plot(fit2, type = 'individual')
plot(fit, type = 'loading.heatmap', which.series = 1:10)
