mydata = PROJ[ID , ]
# Question 1
me=mean(mydata)
me
# Question 2
sd(mydata)
# Question 3
hist(mydata,breaks=seq(-75,105,by=10),probability=TRUE)
qqnorm(mydata,cex.lab=1.5, cex.axis=1.5, cex.main=1.5); abline(mean(mydata),sd(mydata))
# Question 4 (see marking guidelines)
# Question 5
se=sd(mydata)/sqrt(40)
se
# Question 6
lcl1 = me-qnorm(0.975)*se
lcl1
ucl1 = me+qnorm(0.975)*se
ucl1
# Question 7
lcl2 = me-qnorm(0.995)*se
lcl2
ucl2 = me+qnorm(0.995)*se
ucl2
# Question 8
pval = 2*pnorm(me/se)
pval
# Question 9
# if pval < 0.05 then reject, if pval > 0.05 then fail to reject
# Question 10
# if pval < 0.01 then reject, if pval > 0.01 then fail to reject
ID = 205
mydata = PROJ[ID , ]
# Question 1
me=mean(mydata)
me
# Question 2
sd(mydata)
# Question 3
hist(mydata,breaks=seq(-75,105,by=10),probability=TRUE)
qqnorm(mydata,cex.lab=1.5, cex.axis=1.5, cex.main=1.5); abline(mean(mydata),sd(mydata))
# Question 4 (see marking guidelines)
# Question 5
se=sd(mydata)/sqrt(40)
se
# Question 6
lcl1 = me-qnorm(0.975)*se
lcl1
ucl1 = me+qnorm(0.975)*se
ucl1
# Question 7
lcl2 = me-qnorm(0.995)*se
lcl2
ucl2 = me+qnorm(0.995)*se
ucl2
# Question 8
pval = 2*pnorm(me/se)
pval
# Question 9
# if pval < 0.05 then reject, if pval > 0.05 then fail to reject
# Question 10
# if pval < 0.01 then reject, if pval > 0.01 then fail to reject
ID = 17
mydata = PROJ[ID , ]
# Question 1
me=mean(mydata)
me
# Question 2
sd(mydata)
# Question 3
hist(mydata,breaks=seq(-75,105,by=10),probability=TRUE)
qqnorm(mydata,cex.lab=1.5, cex.axis=1.5, cex.main=1.5); abline(mean(mydata),sd(mydata))
# Question 4 (see marking guidelines)
# Question 5
se=sd(mydata)/sqrt(40)
se
# Question 6
lcl1 = me-qnorm(0.975)*se
lcl1
ucl1 = me+qnorm(0.975)*se
ucl1
# Question 7
lcl2 = me-qnorm(0.995)*se
lcl2
ucl2 = me+qnorm(0.995)*se
ucl2
# Question 8
pval = 2*pnorm(me/se)
pval
# Question 9
# if pval < 0.05 then reject, if pval > 0.05 then fail to reject
# Question 10
# if pval < 0.01 then reject, if pval > 0.01 then fail to reject
ID = 160
mydata = PROJ[ID , ]
# Question 1
me=mean(mydata)
me
# Question 2
sd(mydata)
# Question 3
hist(mydata,breaks=seq(-75,105,by=10),probability=TRUE)
qqnorm(mydata,cex.lab=1.5, cex.axis=1.5, cex.main=1.5); abline(mean(mydata),sd(mydata))
# Question 4 (see marking guidelines)
# Question 5
se=sd(mydata)/sqrt(40)
se
# Question 6
lcl1 = me-qnorm(0.975)*se
lcl1
ucl1 = me+qnorm(0.975)*se
ucl1
# Question 7
lcl2 = me-qnorm(0.995)*se
lcl2
ucl2 = me+qnorm(0.995)*se
ucl2
# Question 8
pval = 2*pnorm(me/se)
pval
# Question 9
# if pval < 0.05 then reject, if pval > 0.05 then fail to reject
# Question 10
# if pval < 0.01 then reject, if pval > 0.01 then fail to reject
ID = 278
mydata = PROJ[ID , ]
# Question 1
me=mean(mydata)
me
# Question 2
sd(mydata)
# Question 3
hist(mydata,breaks=seq(-75,105,by=10),probability=TRUE)
qqnorm(mydata,cex.lab=1.5, cex.axis=1.5, cex.main=1.5); abline(mean(mydata),sd(mydata))
# Question 4 (see marking guidelines)
# Question 5
se=sd(mydata)/sqrt(40)
se
# Question 6
lcl1 = me-qnorm(0.975)*se
lcl1
ucl1 = me+qnorm(0.975)*se
ucl1
# Question 7
lcl2 = me-qnorm(0.995)*se
lcl2
ucl2 = me+qnorm(0.995)*se
ucl2
# Question 8
pval = 2*pnorm(me/se)
pval
# Question 9
# if pval < 0.05 then reject, if pval > 0.05 then fail to reject
# Question 10
# if pval < 0.01 then reject, if pval > 0.01 then fail to reject
ID = 271
mydata = PROJ[ID , ]
# Question 1
me=mean(mydata)
me
# Question 2
sd(mydata)
# Question 3
hist(mydata,breaks=seq(-75,105,by=10),probability=TRUE)
qqnorm(mydata,cex.lab=1.5, cex.axis=1.5, cex.main=1.5); abline(mean(mydata),sd(mydata))
# Question 4 (see marking guidelines)
# Question 5
se=sd(mydata)/sqrt(40)
se
# Question 6
lcl1 = me-qnorm(0.975)*se
lcl1
ucl1 = me+qnorm(0.975)*se
ucl1
# Question 7
lcl2 = me-qnorm(0.995)*se
lcl2
ucl2 = me+qnorm(0.995)*se
ucl2
# Question 8
pval = 2*pnorm(me/se)
pval
# Question 9
# if pval < 0.05 then reject, if pval > 0.05 then fail to reject
# Question 10
# if pval < 0.01 then reject, if pval > 0.01 then fail to reject
ID = 182
mydata = PROJ[ID , ]
# Question 1
me=mean(mydata)
me
# Question 2
sd(mydata)
# Question 3
hist(mydata,breaks=seq(-75,105,by=10),probability=TRUE)
qqnorm(mydata,cex.lab=1.5, cex.axis=1.5, cex.main=1.5); abline(mean(mydata),sd(mydata))
# Question 4 (see marking guidelines)
# Question 5
se=sd(mydata)/sqrt(40)
se
# Question 6
lcl1 = me-qnorm(0.975)*se
lcl1
ucl1 = me+qnorm(0.975)*se
ucl1
# Question 7
lcl2 = me-qnorm(0.995)*se
lcl2
ucl2 = me+qnorm(0.995)*se
ucl2
# Question 8
pval = 2*pnorm(me/se)
pval
# Question 9
# if pval < 0.05 then reject, if pval > 0.05 then fail to reject
# Question 10
# if pval < 0.01 then reject, if pval > 0.01 then fail to reject
ID = 94
mydata = PROJ[ID , ]
# Question 1
me=mean(mydata)
me
# Question 2
sd(mydata)
# Question 3
hist(mydata,breaks=seq(-75,105,by=10),probability=TRUE)
qqnorm(mydata,cex.lab=1.5, cex.axis=1.5, cex.main=1.5); abline(mean(mydata),sd(mydata))
# Question 4 (see marking guidelines)
# Question 5
se=sd(mydata)/sqrt(40)
se
# Question 6
lcl1 = me-qnorm(0.975)*se
lcl1
ucl1 = me+qnorm(0.975)*se
ucl1
# Question 7
lcl2 = me-qnorm(0.995)*se
lcl2
ucl2 = me+qnorm(0.995)*se
ucl2
# Question 8
pval = 2*pnorm(me/se)
pval
# Question 9
# if pval < 0.05 then reject, if pval > 0.05 then fail to reject
# Question 10
# if pval < 0.01 then reject, if pval > 0.01 then fail to reject
ID = 203
mydata = PROJ[ID , ]
# Question 1
me=mean(mydata)
me
# Question 2
sd(mydata)
# Question 3
hist(mydata,breaks=seq(-75,105,by=10),probability=TRUE)
qqnorm(mydata,cex.lab=1.5, cex.axis=1.5, cex.main=1.5); abline(mean(mydata),sd(mydata))
# Question 4 (see marking guidelines)
# Question 5
se=sd(mydata)/sqrt(40)
se
# Question 6
lcl1 = me-qnorm(0.975)*se
lcl1
ucl1 = me+qnorm(0.975)*se
ucl1
# Question 7
lcl2 = me-qnorm(0.995)*se
lcl2
ucl2 = me+qnorm(0.995)*se
ucl2
# Question 8
pval = 2*pnorm(me/se)
pval
# Question 9
# if pval < 0.05 then reject, if pval > 0.05 then fail to reject
# Question 10
# if pval < 0.01 then reject, if pval > 0.01 then fail to reject
ID = 62
mydata = PROJ[ID , ]
# Question 1
me=mean(mydata)
me
# Question 2
sd(mydata)
# Question 3
hist(mydata,breaks=seq(-75,105,by=10),probability=TRUE)
qqnorm(mydata,cex.lab=1.5, cex.axis=1.5, cex.main=1.5); abline(mean(mydata),sd(mydata))
# Question 4 (see marking guidelines)
# Question 5
se=sd(mydata)/sqrt(40)
se
# Question 6
lcl1 = me-qnorm(0.975)*se
lcl1
ucl1 = me+qnorm(0.975)*se
ucl1
# Question 7
lcl2 = me-qnorm(0.995)*se
lcl2
ucl2 = me+qnorm(0.995)*se
ucl2
# Question 8
pval = 2*pnorm(me/se)
pval
# Question 9
# if pval < 0.05 then reject, if pval > 0.05 then fail to reject
# Question 10
# if pval < 0.01 then reject, if pval > 0.01 then fail to reject
ID = 79
mydata = PROJ[ID , ]
# Question 1
me=mean(mydata)
me
# Question 2
sd(mydata)
# Question 3
hist(mydata,breaks=seq(-75,105,by=10),probability=TRUE)
qqnorm(mydata,cex.lab=1.5, cex.axis=1.5, cex.main=1.5); abline(mean(mydata),sd(mydata))
# Question 4 (see marking guidelines)
# Question 5
se=sd(mydata)/sqrt(40)
se
# Question 6
lcl1 = me-qnorm(0.975)*se
lcl1
ucl1 = me+qnorm(0.975)*se
ucl1
# Question 7
lcl2 = me-qnorm(0.995)*se
lcl2
ucl2 = me+qnorm(0.995)*se
ucl2
# Question 8
pval = 2*pnorm(me/se)
pval
# Question 9
# if pval < 0.05 then reject, if pval > 0.05 then fail to reject
# Question 10
# if pval < 0.01 then reject, if pval > 0.01 then fail to reject
ID = 100
mydata = PROJ[ID , ]
# Question 1
me=mean(mydata)
me
# Question 2
sd(mydata)
# Question 3
hist(mydata,breaks=seq(-75,105,by=10),probability=TRUE)
qqnorm(mydata,cex.lab=1.5, cex.axis=1.5, cex.main=1.5); abline(mean(mydata),sd(mydata))
# Question 4 (see marking guidelines)
# Question 5
se=sd(mydata)/sqrt(40)
se
# Question 6
lcl1 = me-qnorm(0.975)*se
lcl1
ucl1 = me+qnorm(0.975)*se
ucl1
# Question 7
lcl2 = me-qnorm(0.995)*se
lcl2
ucl2 = me+qnorm(0.995)*se
ucl2
# Question 8
pval = 2*pnorm(me/se)
pval
# Question 9
# if pval < 0.05 then reject, if pval > 0.05 then fail to reject
# Question 10
# if pval < 0.01 then reject, if pval > 0.01 then fail to reject
ID = 165
mydata = PROJ[ID , ]
# Question 1
me=mean(mydata)
me
# Question 2
sd(mydata)
# Question 3
hist(mydata,breaks=seq(-75,105,by=10),probability=TRUE)
qqnorm(mydata,cex.lab=1.5, cex.axis=1.5, cex.main=1.5); abline(mean(mydata),sd(mydata))
# Question 4 (see marking guidelines)
# Question 5
se=sd(mydata)/sqrt(40)
se
# Question 6
lcl1 = me-qnorm(0.975)*se
lcl1
ucl1 = me+qnorm(0.975)*se
ucl1
# Question 7
lcl2 = me-qnorm(0.995)*se
lcl2
ucl2 = me+qnorm(0.995)*se
ucl2
# Question 8
pval = 2*pnorm(me/se)
pval
# Question 9
# if pval < 0.05 then reject, if pval > 0.05 then fail to reject
# Question 10
# if pval < 0.01 then reject, if pval > 0.01 then fail to reject
ID = 155
mydata = PROJ[ID , ]
# Question 1
me=mean(mydata)
me
# Question 2
sd(mydata)
# Question 3
hist(mydata,breaks=seq(-75,105,by=10),probability=TRUE)
qqnorm(mydata,cex.lab=1.5, cex.axis=1.5, cex.main=1.5); abline(mean(mydata),sd(mydata))
# Question 4 (see marking guidelines)
# Question 5
se=sd(mydata)/sqrt(40)
se
# Question 6
lcl1 = me-qnorm(0.975)*se
lcl1
ucl1 = me+qnorm(0.975)*se
ucl1
# Question 7
lcl2 = me-qnorm(0.995)*se
lcl2
ucl2 = me+qnorm(0.995)*se
ucl2
# Question 8
pval = 2*pnorm(me/se)
pval
# Question 9
# if pval < 0.05 then reject, if pval > 0.05 then fail to reject
# Question 10
# if pval < 0.01 then reject, if pval > 0.01 then fail to reject
library(devtools)
devtools::install_github('mosleyl/TSdisaggregation')
Y.sim <- function(nq,beta,phi,sigma,phi.err,sigma.err) {
p = length(phi)
X <- matrix(NA, nrow = nq, ncol = p)
for(isim in 1:p) {
X[,isim] <- AR.sim(n=nq,phi=phi[isim],sigma=sigma[isim]) # CHANGE TO AR2.sim FOR RANDOM WALK!!
}
err <- AR.sim(n=nq,phi=phi.err,sigma=sigma.err)
Y <- X%*%beta + err
lt <- list("Y"=Y,"X"=X,"err"=err)
return(lt)
}
## AR.sim()/AR2.sim() - AR simulator
AR.sim <- function(n, phi, sigma) {
x <- rep(0,n)
eps <- rnorm(n,0,sigma)
x[1] <- rnorm(1,0,sigma/(1-phi^2))
for(t in 2:n) {
x[t] <- phi*x[t-1] + eps[t]
}
return(x)
}
n_l = 50
m = 4
n = m*n_l
p = 30
rho = 0.7
beta = c(rep(3,10),rep(0,20))
data = Y.sim(n,beta,rep(0,p),rep(1,p),rho,1)
nfull = m*n_l
extr = n - nfull # number of extrapolations
C <- kronecker(diag(n_l), matrix(data = 1, nrow = 1, ncol = m))
C <- cbind(C, matrix(0L, n_l, extr))
y = data$Y
X = data$X
Y = C %*% y
library(TSdisaggregation)
cl = TSdisaggregation::disaggregate(as.matrix(Y), X, aggMat = 'sum', aggRatio = 4, method = 'Chow-Lin')
plot(y, type = 'l')
lines(cl$y_Est, col = 'red')
cl$rho_Est
sptd = TSdisaggregation::disaggregate(as.matrix(Y), X, aggMat = 'sum', aggRatio = 4, method = 'spTD')
plot(y, type = 'l')
lines(sptd$y_Est, col = 'red')
sptd$rho_Est
n = m*n_l
p = 30
rho = 0.7
beta = c(rep(3,10),rep(0,20))
data = Y.sim(n,beta,rep(0,p),rep(1,p),rho,1)
nfull = m*n_l
extr = n - nfull # number of extrapolations
C <- kronecker(diag(n_l), matrix(data = 1, nrow = 1, ncol = m))
C <- cbind(C, matrix(0L, n_l, extr))
y = data$Y
X = data$X
Y = C %*% y
#library(TSdisaggregation)
cl = TSdisaggregation::disaggregate(as.matrix(Y), X, aggMat = 'sum', aggRatio = 4, method = 'Chow-Lin')
sptd = TSdisaggregation::disaggregate(as.matrix(Y), X, aggMat = 'sum', aggRatio = 4, method = 'spTD')
sptd$rho_Est
plot(y, type = 'l')
lines(sptd$y_Est, col = 'red')
getwd()
install.packages('rmarkdown')
install.packages('tempdisagg')
setwd('C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Nowcasting/Package/SparseDFM')
library(devtools)
library(roxygen2)
devtools::load_all()
document()
?SparseDFM
setwd('C:/Users/mosleyl/OneDrive - Lancaster University/PhD/Nowcasting/Package/SparseDFM')
library(devtools)
library(roxygen2)
devtools::load_all()
document()
?SparseDFM
